<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cc.mapper.dboacc.AccountMapper">
    <resultMap type="com.cc.entity.Account" id="AccountResult">
        <id property="accountID" column="AccountID"/>
        <result property="username" column="Username"/>
        <result property="password" column="Password_hash"/>
        <result property="accStatus" column="acc_status"/>
        <result property="email" column="email"/>
        <result property="mallPoints" column="mallpoints"/>
        <result property="regDate" column="reg_date"/>
        <result property="lastLogin" column="last_login"/>
        <result property="regIp" column="reg_ip"/>
        <result property="admin" column="admin"/>
        <result property="isGm" column="isGm"/>
        <result property="lastServerFarmId" column="lastServerFarmId"/>
        <result property="founder" column="founder"/>
        <result property="founderRecv" column="founder_recv"/>
        <result property="lastIp" column="last_ip"/>
        <result property="delCharPw" column="del_char_pw"/>
        <result property="premiumSlots" column="PremiumSlots"/>
        <result property="eventCoins" column="EventCoins"/>
        <result property="waguCoins" column="WaguCoins"/>
        <result property="webIp" column="web_ip"/>
        <result property="bansCount" column="BansCount"/>
        <result property="bansEnd" column="bans_end"/>
        <result property="bz" column="bz"/>
        <result property="newPlayer" column="NewPlayer"/>
        <result property="firstCharID" column="firstCharID"/>
        <result property="replacementCard" column="replacement_card"/>
        <result property="cardCountLimit" column="card_count_limit"/>
    </resultMap>

    <insert id="register">
        insert into accounts(`Username`, `Password_hash`, `email`, `reg_ip`, `web_ip`, `del_char_pw`)
        values (#{username}, #{password}, #{email}, #{regIp}, #{webIp}, #{delCharPw});
    </insert>

    <select id="isUserRepeat" resultMap="AccountResult">
        select `Username` from accounts
        <if test="username != null">where #{username} = `Username`</if>
        ;
    </select>

    <select id="checkUserPwd" resultMap="AccountResult">
        select `AccountID`,`Username`,`acc_status`,`email`,`mallpoints`,`WaguCoins`,`EventCoins`,`admin` from accounts
        <if test="username != null">where #{username} = `Username`</if>
        <if test="password != null">and #{password} = `Password_hash`</if>
        ;
    </select>

    <select id="checkIpNum" resultType="java.lang.Integer">
        select count(`web_ip`) from accounts
        <if test="ip != null">where #{ip} = `web_ip`</if>
    </select>

    <select id="checkEmailNum" resultType="java.lang.Integer">
        select count(`email`) from accounts
        <if test="email != null">where #{email} = `email`</if>
    </select>

    <select id="getPassword" resultMap="AccountResult">
        select `email`,`Password_hash` from accounts
        <if test="username != null">where #{username} = `Username`</if>
    </select>

    <update id="updatePwd">
        <if test="newPassword != null">
        update accounts set `Password_hash` = #{newPassword}, `del_char_pw` = #{md5}
        where `username` = #{username};
        </if>
    </update>

    <update id="addMallPoints">
        <if test="accountID != null">
            update accounts set `mallpoints` = `mallpoints` + #{cash}
            where `AccountID` = #{accountID}
        </if>
    </update>

    <select id="isAdmin" resultType="java.lang.Integer">
        select count(*)
        from accounts
        where `AccountID` = #{id} and `admin` = 10;
    </select>

    <update id="checkUserCashById">
        update accounts
        set `mallpoints` = `mallpoints` - #{price}
        where `AccountID` = #{id}
          and (`mallpoints` - #{price}) >= 0;
    </update>

    <select id="getLatestMallPoints" resultMap="AccountResult">
        select `mallpoints`
        from accounts
        where `AccountID` = #{id}
    </select>

    <select id="getCardCount" resultMap="AccountResult">
        select `replacement_card`
        from accounts
        where `AccountID` = #{id}
    </select>

    <update id="addCardCountById">
        update accounts
        set `replacement_card` = `replacement_card` + 1
        where `AccountID` = #{id}
          and `replacement_card` &lt; 3
          and `card_count_limit` &lt; 3;
    </update>

    <update id="subCardCountById">
        update accounts
        set `replacement_card` = `replacement_card` - 1
        where `AccountID` = #{id}
          and `replacement_card` > 0;
    </update>

    <update id="addCardCountLimit">
        update accounts
        set `card_count_limit` = `card_count_limit` + 1
        where `AccountID` = #{id}
          and `card_count_limit` &lt; 3;
    </update>

    <update id="resetCardCount">
        update accounts
        set `replacement_card` = 0,
            `card_count_limit` = 0;
    </update>

    <select id="isBlock" resultType="java.lang.Integer">
        select count(*)
        from accounts
        where `AccountID` = #{id}
          and `acc_status` = 'block';
    </select>
</mapper>
